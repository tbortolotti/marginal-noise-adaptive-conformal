# --------------------------------------------------
# Plot loss function as a function of the calibration set size, for different number of classes
make_figure_1 <- function(save_plots=FALSE, reload=FALSE, plot.epsilon=0.1, plot.nu=0.2) {
if(reload) {
summary <- load_data(1)
}
df <- summary %>%
filter(plot=="Klab") %>%
#filter(K %in% c(4, 8, 16)) %>%
mutate(Method = factor(Method, levels = method.values, labels = method.labels)) %>%
mutate(K = factor(K, levels = label.values, labels = label.labels))
pp <- ggplot(df, aes(x = n_cal, y = values, color = Method, shape = Method, linetype = Method)) +
geom_point() +
geom_line() +
facet_wrap(~ K, scales = "fixed") +
#scale_x_log10(breaks = unique(df$n_cal), labels = unique(df$n_cal)) +
scale_x_continuous(trans = 'log10', breaks = unique(df$n_cal), labels = unique(df$n_cal)) +
scale_color_manual(values = color.scale) +
scale_shape_manual(values = shape.scale) +
scale_linetype_manual(values = linetype.scale) +
xlab("Number of calibration samples") +
ylab("Loss") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
if(save_plots) {
plot.file <- sprintf("figures/BRR_Klab_eps%f_nu%f.pdf", plot.epsilon, plot.nu)
ggsave(file=plot.file, height=3, width=7, units="in")
return(NULL)
} else{
return(pp)
}
}
label.values = c(4, 8, 16)
label.labels = c("K=4", "K=8", "K=16")
make_figure_1(plot.epsilon=0.1, plot.nu=0.1, save_plots=TRUE, reload=FALSE)
# Plot loss function as a function of the number of classes, for different values of the calibration set size
make_figure_2 <- function(save_plots=FALSE, reload=FALSE, plot.epsilon=0.1, plot.nu=0.2) {
if(reload) {
summary <- load_data(1)
}
df <- summary %>%
filter(plot=="nlab") %>%
mutate(Method = factor(Method, levels = method.values, labels = method.labels)) %>%
mutate(n_lab = factor(n_cal, levels = label.values, labels = label.labels))
pp <- ggplot(df, aes(x = K, y = values, color = Method, shape = Method, linetype = Method)) +
geom_point() +
geom_line() +
facet_wrap(~ n_lab, scales = "fixed") +
scale_color_manual(values = color.scale) +
scale_shape_manual(values = shape.scale) +
scale_linetype_manual(values = linetype.scale) +
xlab("Number of classes") +
ylab("Loss") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
if(save_plots) {
plot.file <- sprintf("figures/BRR_nlab_eps%f_nu%f.pdf", plot.epsilon, plot.nu)
ggsave(file=plot.file, height=3, width=7, units="in")
return(NULL)
} else{
return(pp)
}
}
label.values = c(50, 100, 500)
label.labels = c("n=50", "n=100", "n=500")
plot.alpha <- 0.1
plot.epsilon <- 0.2
make_figure_2(plot.epsilon=0.1, plot.nu=0.1, save_plots=TRUE, reload=FALSE)
### Plot of the finite sample correction with the optimized betas and the rr betas
# MAIN -------------------------------------------------------------------------
make_figure_1 <- function(save_plots=FALSE, reload=FALSE, plot.epsilon=0.1, plot.nu=0.2) {
if(reload) {
summary <- load_data(1)
}
df <- summary %>%
filter(plot=="Klab") %>%
filter(K %in% c(4, 8, 16)) %>%
mutate(Method = factor(Method, levels = method.values, labels = method.labels)) %>%
mutate(K = factor(K, levels = label.values, labels = label.labels))
pp <- ggplot(df, aes(x = n_cal, y = values, color = Method, shape = Method, linetype = Method)) +
geom_point() +
geom_line() +
facet_wrap(~ K, scales = "fixed") +
#scale_x_log10(breaks = unique(df$n_cal), labels = unique(df$n_cal)) +
scale_x_continuous(trans = 'log10', breaks = unique(df$n_cal), labels = unique(df$n_cal)) +
scale_color_manual(values = color.scale) +
scale_shape_manual(values = shape.scale) +
scale_linetype_manual(values = linetype.scale) +
xlab("Number of calibration samples") +
ylab("Loss") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
if(save_plots) {
plot.file <- sprintf("figures/BRR_Klab_eps%f_nu%f.pdf", plot.epsilon, plot.nu)
ggsave(file=plot.file, height=3, width=7, units="in")
return(NULL)
} else{
return(pp)
}
}
label.values = c(4, 8, 16)
label.labels = c("K=4", "K=8", "K=16")
make_figure_1(plot.epsilon=0.1, plot.nu=0.1, save_plots=TRUE, reload=FALSE)
options(width = 300)
library(tidyverse)
library(latex2exp)
library(RColorBrewer)
# APPENDIX ---------------------------------------------------------------------
## SIMPLIFIED METHODS ----------------------------------------------------------
### Two-level randomized response model ----------------------------------------
### Plot of the loss for the optimized betas and the rr betas
load_data <- function(exp.num) {
idir <- sprintf("results/exp%d/simplified_methods", exp.num)
ifile.list <- list.files(idir)
results <- do.call("rbind", lapply(ifile.list, function(ifile) {
df <- read_delim(sprintf("%s/%s", idir, ifile), delim=",", col_types=cols(), guess_max=2)
}))
#summary <- results
summary <- results %>%
pivot_longer("n_cal", names_to = "Key", values_to = "Value")# %>%
#group_by(data, num_var, K, signal, model_name, contamination, epsilon, estimate, n_train, n_cal, Guarantee, Alpha, Label, Method, Key) %>%
#summarise(Mean=mean(Value), N=n(), SE=2*sd(Value)/sqrt(N))
return(results)
}
exp.num <- 1
summary <- load_data(exp.num)
# prova <- summary  %>%
#   pivot_longer("n_cal", names_to = "Key", values_to = "Value")
method.values = c("RR", "CVX")
method.labels = c("RR", "Optimized")
cbPalette <- c("grey50", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
color.scale <- cbPalette[c(3,7)]
shape.scale <- c(2,0)
linetype.scale <- c(1,1)
plot.alpha <- 0.1
plot.epsilon <- 0.2
# --------------------------------------------------
#' Plot 1: Finite sample correction as a function of the calibration set size,
#'         for different number of classes
make_figure_1 <- function(save_plots=FALSE, reload=FALSE, plot.epsilon=0.1, plot.nu=0.2) {
if(reload) {
summary <- load_data(1)
}
df <- summary %>%
filter(plot=="Klab") %>%
filter(K %in% c(4, 8, 16)) %>%
mutate(Method = factor(Method, levels = method.values, labels = method.labels)) %>%
mutate(K = factor(K, levels = label.values, labels = label.labels))
pp <- ggplot(df, aes(x = n_cal, y = values, color = Method, shape = Method, linetype = Method)) +
geom_point() +
geom_line() +
facet_wrap(~ K, scales = "fixed") +
#scale_x_log10(breaks = unique(df$n_cal), labels = unique(df$n_cal)) +
scale_x_continuous(trans = 'log10', breaks = unique(df$n_cal), labels = unique(df$n_cal)) +
scale_color_manual(values = color.scale) +
scale_shape_manual(values = shape.scale) +
scale_linetype_manual(values = linetype.scale) +
xlab("Number of calibration samples") +
ylab(expression(delta^{marg}(n))) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
if(save_plots) {
plot.file <- sprintf("figures/BRR_Klab_eps%f_nu%f.pdf", plot.epsilon, plot.nu)
ggsave(file=plot.file, height=3, width=7, units="in")
return(NULL)
} else{
return(pp)
}
}
label.values = c(4, 8, 16)
label.labels = c("K=4", "K=8", "K=16")
make_figure_1(plot.epsilon=0.1, plot.nu=0.1, save_plots=TRUE, reload=FALSE)
#' Plot 2: Finite sample correction as a function of the number of classes, for different
#' values of the calibration set size
make_figure_2 <- function(save_plots=FALSE, reload=FALSE, plot.epsilon=0.1, plot.nu=0.2) {
if(reload) {
summary <- load_data(1)
}
df <- summary %>%
filter(plot=="nlab") %>%
mutate(Method = factor(Method, levels = method.values, labels = method.labels)) %>%
mutate(n_lab = factor(n_cal, levels = label.values, labels = label.labels))
pp <- ggplot(df, aes(x = K, y = values, color = Method, shape = Method, linetype = Method)) +
geom_point() +
geom_line() +
facet_wrap(~ n_lab, scales = "fixed") +
scale_color_manual(values = color.scale) +
scale_shape_manual(values = shape.scale) +
scale_linetype_manual(values = linetype.scale) +
xlab("Number of classes") +
ylab(expression(delta^{marg}(n))) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
if(save_plots) {
plot.file <- sprintf("figures/BRR_nlab_eps%f_nu%f.pdf", plot.epsilon, plot.nu)
ggsave(file=plot.file, height=3, width=7, units="in")
return(NULL)
} else{
return(pp)
}
}
label.values = c(50, 100, 500)
label.labels = c("n=50", "n=100", "n=500")
plot.alpha <- 0.1
plot.epsilon <- 0.2
make_figure_2(plot.epsilon=0.1, plot.nu=0.1, save_plots=TRUE, reload=FALSE)
### Plot of the finite sample correction with the optimized betas and the rr betas
# MAIN -------------------------------------------------------------------------
make_figure_2 <- function(save_plots=FALSE, reload=FALSE, plot.epsilon=0.1, plot.nu=0.2) {
if(reload) {
summary <- load_data(1)
}
df <- summary %>%
filter(plot=="nlab") %>%
mutate(Method = factor(Method, levels = method.values, labels = method.labels)) %>%
mutate(n_lab = factor(n_cal, levels = label.values, labels = label.labels))
pp <- ggplot(df, aes(x = K, y = values, color = Method, shape = Method, linetype = Method)) +
geom_point() +
geom_line() +
facet_wrap(~ n_lab, scales = "fixed") +
scale_color_manual(values = color.scale) +
scale_shape_manual(values = shape.scale) +
scale_linetype_manual(values = linetype.scale) +
xlab("Number of classes") +
ylab(expression(delta^{marg} (n))) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
if(save_plots) {
plot.file <- sprintf("figures/BRR_nlab_eps%f_nu%f.pdf", plot.epsilon, plot.nu)
ggsave(file=plot.file, height=3, width=7, units="in")
return(NULL)
} else{
return(pp)
}
}
label.values = c(50, 100, 500)
label.labels = c("n=50", "n=100", "n=500")
plot.alpha <- 0.1
plot.epsilon <- 0.2
make_figure_2(plot.epsilon=0.1, plot.nu=0.1, save_plots=TRUE, reload=FALSE)
### Plot of the finite sample correction with the optimized betas and the rr betas
# MAIN -------------------------------------------------------------------------
make_figure_1 <- function(save_plots=FALSE, reload=FALSE, plot.epsilon=0.1, plot.nu=0.2) {
if(reload) {
summary <- load_data(1)
}
df <- summary %>%
filter(plot=="Klab") %>%
filter(K %in% c(4, 8, 16)) %>%
mutate(Method = factor(Method, levels = method.values, labels = method.labels)) %>%
mutate(K = factor(K, levels = label.values, labels = label.labels))
pp <- ggplot(df, aes(x = n_cal, y = values, color = Method, shape = Method, linetype = Method)) +
geom_point() +
geom_line() +
facet_wrap(~ K, scales = "fixed") +
#scale_x_log10(breaks = unique(df$n_cal), labels = unique(df$n_cal)) +
scale_x_continuous(trans = 'log10', breaks = unique(df$n_cal), labels = unique(df$n_cal)) +
scale_color_manual(values = color.scale) +
scale_shape_manual(values = shape.scale) +
scale_linetype_manual(values = linetype.scale) +
xlab("Number of calibration samples") +
ylab(expression(delta^"marg" * "(n)")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
if(save_plots) {
plot.file <- sprintf("figures/BRR_Klab_eps%f_nu%f.pdf", plot.epsilon, plot.nu)
ggsave(file=plot.file, height=3, width=7, units="in")
return(NULL)
} else{
return(pp)
}
}
label.values = c(4, 8, 16)
label.labels = c("K=4", "K=8", "K=16")
make_figure_1(plot.epsilon=0.1, plot.nu=0.1, save_plots=TRUE, reload=FALSE)
#' Plot 2: Finite sample correction as a function of the number of classes, for different
#' values of the calibration set size
make_figure_2 <- function(save_plots=FALSE, reload=FALSE, plot.epsilon=0.1, plot.nu=0.2) {
if(reload) {
summary <- load_data(1)
}
df <- summary %>%
filter(plot=="nlab") %>%
mutate(Method = factor(Method, levels = method.values, labels = method.labels)) %>%
mutate(n_lab = factor(n_cal, levels = label.values, labels = label.labels))
pp <- ggplot(df, aes(x = K, y = values, color = Method, shape = Method, linetype = Method)) +
geom_point() +
geom_line() +
facet_wrap(~ n_lab, scales = "fixed") +
scale_color_manual(values = color.scale) +
scale_shape_manual(values = shape.scale) +
scale_linetype_manual(values = linetype.scale) +
xlab("Number of classes") +
ylab(expression(delta^"marg" * "(n)")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
if(save_plots) {
plot.file <- sprintf("figures/BRR_nlab_eps%f_nu%f.pdf", plot.epsilon, plot.nu)
ggsave(file=plot.file, height=3, width=7, units="in")
return(NULL)
} else{
return(pp)
}
}
label.values = c(50, 100, 500)
label.labels = c("n=50", "n=100", "n=500")
plot.alpha <- 0.1
plot.epsilon <- 0.2
make_figure_2(plot.epsilon=0.1, plot.nu=0.1, save_plots=TRUE, reload=FALSE)
### Plot of the finite sample correction with the optimized betas and the rr betas
# MAIN -------------------------------------------------------------------------
make_figure_1 <- function(save_plots=FALSE, reload=FALSE, plot.epsilon=0.1, plot.nu=0.2) {
if(reload) {
summary <- load_data(1)
}
df <- summary %>%
filter(plot=="Klab") %>%
filter(K %in% c(4, 8, 16)) %>%
mutate(Method = factor(Method, levels = method.values, labels = method.labels)) %>%
mutate(K = factor(K, levels = label.values, labels = label.labels))
pp <- ggplot(df, aes(x = n_cal, y = values, color = Method, shape = Method, linetype = Method)) +
geom_point() +
geom_line() +
facet_wrap(~ K, scales = "fixed") +
#scale_x_log10(breaks = unique(df$n_cal), labels = unique(df$n_cal)) +
scale_x_continuous(trans = 'log10', breaks = unique(df$n_cal), labels = unique(df$n_cal)) +
scale_color_manual(values = color.scale) +
scale_shape_manual(values = shape.scale) +
scale_linetype_manual(values = linetype.scale) +
xlab("Number of calibration samples") +
ylab(expression(delta^"marg" * "(n)")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
if(save_plots) {
plot.file <- sprintf("figures/delta_marg_const_BRR_Klab_eps%f_nu%f.pdf", plot.epsilon, plot.nu)
ggsave(file=plot.file, height=3, width=7, units="in")
return(NULL)
} else{
return(pp)
}
}
label.values = c(4, 8, 16)
label.labels = c("K=4", "K=8", "K=16")
make_figure_1(plot.epsilon=0.5, plot.nu=0.5, save_plots=TRUE, reload=FALSE)
#' Plot 4: Finite sample correction as a function of the number of classes, for different
#'         values of the calibration set size
make_figure_2 <- function(save_plots=FALSE, reload=FALSE, plot.epsilon=0.1, plot.nu=0.2) {
if(reload) {
summary <- load_data(1)
}
df <- summary %>%
filter(plot=="nlab") %>%
mutate(Method = factor(Method, levels = method.values, labels = method.labels)) %>%
mutate(n_lab = factor(n_cal, levels = label.values, labels = label.labels))
pp <- ggplot(df, aes(x = K, y = values, color = Method, shape = Method, linetype = Method)) +
geom_point() +
geom_line() +
facet_wrap(~ n_lab, scales = "fixed") +
scale_color_manual(values = color.scale) +
scale_shape_manual(values = shape.scale) +
scale_linetype_manual(values = linetype.scale) +
xlab("Number of classes") +
ylab(expression(delta^"marg" * "(n)")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
if(save_plots) {
plot.file <- sprintf("figures/delta_marg_const_BRR_nlab_eps%f_nu%f.pdf", plot.epsilon, plot.nu)
ggsave(file=plot.file, height=3, width=7, units="in")
return(NULL)
} else{
return(pp)
}
}
label.values = c(50, 100, 500)
label.labels = c("n=50", "n=100", "n=500")
plot.alpha <- 0.1
plot.epsilon <- 0.2
make_figure_2(plot.epsilon=0.5, plot.nu=0.5, save_plots=TRUE, reload=FALSE)
# MAIN -------------------------------------------------------------------------
make_figure_1 <- function(save_plots=FALSE, reload=FALSE, plot.epsilon=0.1, plot.nu=0.2) {
if(reload) {
summary <- load_data(1)
}
df <- summary %>%
filter(plot=="Klab", epsilon==plot.epsilon, nu==plot.nu) %>%
filter(K %in% c(4, 8, 16)) %>%
mutate(Method = factor(Method, levels = method.values, labels = method.labels)) %>%
mutate(K = factor(K, levels = label.values, labels = label.labels))
pp <- ggplot(df, aes(x = n_cal, y = values, color = Method, shape = Method, linetype = Method)) +
geom_point() +
geom_line() +
facet_wrap(~ K, scales = "fixed") +
#scale_x_log10(breaks = unique(df$n_cal), labels = unique(df$n_cal)) +
scale_x_continuous(trans = 'log10', breaks = unique(df$n_cal), labels = unique(df$n_cal)) +
scale_color_manual(values = color.scale) +
scale_shape_manual(values = shape.scale) +
scale_linetype_manual(values = linetype.scale) +
xlab("Number of calibration samples") +
ylab(expression(delta^"marg" * "(n)")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
if(save_plots) {
plot.file <- sprintf("figures/delta_marg_const_BRR_Klab_eps%f_nu%f.pdf", plot.epsilon, plot.nu)
ggsave(file=plot.file, height=3, width=7, units="in")
return(NULL)
} else{
return(pp)
}
}
label.values = c(4, 8, 16)
label.labels = c("K=4", "K=8", "K=16")
make_figure_1(plot.epsilon=0.5, plot.nu=0.5, save_plots=TRUE, reload=FALSE)
# APPENDIX ---------------------------------------------------------------------
## SIMPLIFIED METHODS ----------------------------------------------------------
### Two-level randomized response model ----------------------------------------
### Plot of the loss for the optimized betas and the rr betas
load_data <- function(exp.num) {
idir <- sprintf("results/exp%d/simplified_methods", exp.num)
ifile.list <- list.files(idir)
results <- do.call("rbind", lapply(ifile.list, function(ifile) {
df <- read_delim(sprintf("%s/%s", idir, ifile), delim=",", col_types=cols(), guess_max=2)
}))
#summary <- results
summary <- results %>%
pivot_longer("n_cal", names_to = "Key", values_to = "Value")# %>%
#group_by(data, num_var, K, signal, model_name, contamination, epsilon, estimate, n_train, n_cal, Guarantee, Alpha, Label, Method, Key) %>%
#summarise(Mean=mean(Value), N=n(), SE=2*sd(Value)/sqrt(N))
return(results)
}
exp.num <- 1
summary <- load_data(exp.num)
method.values = c("RR", "CVX")
method.labels = c("RR", "Optimized")
cbPalette <- c("grey50", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7")
color.scale <- cbPalette[c(3,7)]
shape.scale <- c(2,0)
linetype.scale <- c(1,1)
plot.alpha <- 0.1
plot.epsilon <- 0.2
rm(plot.alpha)
rm(plot.epsilon)
#' Plot 1: Finite sample correction as a function of the calibration set size,
#'         for different number of classes
make_figure_1 <- function(save_plots=FALSE, reload=FALSE, plot.epsilon=0.1, plot.nu=0.2) {
if(reload) {
summary <- load_data(1)
}
df <- summary %>%
filter(plot=="Klab", epsilon==plot.epsilon, nu==plot.nu) %>%
filter(K %in% c(4, 8, 16)) %>%
mutate(Method = factor(Method, levels = method.values, labels = method.labels)) %>%
mutate(K = factor(K, levels = label.values, labels = label.labels))
pp <- ggplot(df, aes(x = n_cal, y = values, color = Method, shape = Method, linetype = Method)) +
geom_point() +
geom_line() +
facet_wrap(~ K, scales = "fixed") +
#scale_x_log10(breaks = unique(df$n_cal), labels = unique(df$n_cal)) +
scale_x_continuous(trans = 'log10', breaks = unique(df$n_cal), labels = unique(df$n_cal)) +
scale_color_manual(values = color.scale) +
scale_shape_manual(values = shape.scale) +
scale_linetype_manual(values = linetype.scale) +
xlab("Number of calibration samples") +
ylab(expression(delta^"marg" * "(n)")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
if(save_plots) {
plot.file <- sprintf("figures/delta_marg_const_BRR_Klab_eps%f_nu%f.pdf", plot.epsilon, plot.nu)
ggsave(file=plot.file, height=3, width=7, units="in")
return(NULL)
} else{
return(pp)
}
}
label.values = c(4, 8, 16)
label.labels = c("K=4", "K=8", "K=16")
make_figure_1(plot.epsilon=0.5, plot.nu=0.5, save_plots=TRUE, reload=FALSE)
#' Plot 2: Finite sample correction as a function of the number of classes, for different
#'         values of the calibration set size
make_figure_2 <- function(save_plots=FALSE, reload=FALSE, plot.epsilon=0.1, plot.nu=0.2) {
if(reload) {
summary <- load_data(1)
}
df <- summary %>%
filter(plot=="nlab", epsilon==plot.epsilon, nu==plot.nu) %>%
mutate(Method = factor(Method, levels = method.values, labels = method.labels)) %>%
mutate(n_lab = factor(n_cal, levels = label.values, labels = label.labels))
pp <- ggplot(df, aes(x = K, y = values, color = Method, shape = Method, linetype = Method)) +
geom_point() +
geom_line() +
facet_wrap(~ n_lab, scales = "fixed") +
scale_color_manual(values = color.scale) +
scale_shape_manual(values = shape.scale) +
scale_linetype_manual(values = linetype.scale) +
xlab("Number of classes") +
ylab(expression(delta^"marg" * "(n)")) +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
if(save_plots) {
plot.file <- sprintf("figures/delta_marg_const_BRR_nlab_eps%f_nu%f.pdf", plot.epsilon, plot.nu)
ggsave(file=plot.file, height=3, width=7, units="in")
return(NULL)
} else{
return(pp)
}
}
label.values = c(50, 100, 500)
label.labels = c("n=50", "n=100", "n=500")
plot.alpha <- 0.1
plot.epsilon <- 0.2
rm(plot.alpha)
rm(plot.epsilon)
make_figure_2(plot.epsilon=0.5, plot.nu=0.5, save_plots=TRUE, reload=FALSE)
